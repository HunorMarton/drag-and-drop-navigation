{"version":3,"sources":["../src/components/rename-dialog.tsx","../src/hooks/use-page-navigation.ts","../src/components/page-tab.tsx","../src/components/add-page-space.tsx","../src/utils/get-page-transform.ts","../src/components/add-page.tsx","../src/components/drag-overlay.tsx","../src/components/drag-context.tsx","../src/components/page-navigation.tsx","../src/root.tsx"],"names":["React","Dialog","DialogContent","DialogHeader","DialogTitle","Label","Input","DialogFooter","Button","useState","useCallback","activeId","useSortable","CSS","React2","ContextMenu","ContextMenuTrigger","ContextMenuContent","ContextMenuItem","Edit2","Copy","Trash2","React3","Plus","React4","React5","DndDragOverlay","useSensors","useSensor","PointerSensor","KeyboardSensor","sortableKeyboardCoordinates","React6","DndContext","closestCenter","React7","SortableContext","horizontalListSortingStrategy","React8"],"mappings":"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","file":"index.js","sourcesContent":["\"use client\";\nimport * as React from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  Button,\n  Label,\n} from \"@workspace/ui\";\nimport { Input } from \"@workspace/ui\";\nimport type { RenameDialogState } from \"../types/page\";\n\ninterface RenameDialogProps {\n  state: RenameDialogState;\n  newPageName: string;\n  onNewPageNameChange: (name: string) => void;\n  onConfirm: () => void;\n  onCancel: () => void;\n}\n\nexport function RenameDialog({\n  state,\n  newPageName,\n  onNewPageNameChange,\n  onConfirm,\n  onCancel,\n}: RenameDialogProps) {\n  return (\n    <Dialog open={state.isOpen} onOpenChange={(open) => !open && onCancel()}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Rename Page</DialogTitle>\n        </DialogHeader>\n        <div className=\"grid gap-4 py-4\">\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"page-name\">Page Name</Label>\n            <Input\n              id=\"page-name\"\n              value={newPageName}\n              onChange={(e) => onNewPageNameChange(e.target.value)}\n              onKeyDown={(e) => e.key === \"Enter\" && onConfirm()}\n              autoFocus\n            />\n          </div>\n        </div>\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={onCancel}>\n            Cancel\n          </Button>\n          <Button onClick={onConfirm}>Rename</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","\"use client\";\n\nimport { useState, useCallback } from \"react\";\nimport type { RenameDialogState, PageNavigationCallbacks } from \"../types/page\";\n\nexport function usePageNavigationInternal(callbacks: PageNavigationCallbacks) {\n  const [activeId, setActiveId] = useState<string | null>(null);\n  const [renameDialog, setRenameDialog] = useState<RenameDialogState>({\n    isOpen: false,\n    pageId: \"\",\n    currentName: \"\",\n  });\n  const [newPageName, setNewPageName] = useState(\"\");\n\n  const handleSelectPage = useCallback(\n    (id: string) => {\n      console.log(\"🎯 Page selected:\", { pageId: id });\n      callbacks.onPageSelect(id);\n    },\n    [callbacks]\n  );\n\n  const handleRenamePage = useCallback((id: string, currentName: string) => {\n    setRenameDialog({ isOpen: true, pageId: id, currentName });\n    setNewPageName(currentName);\n  }, []);\n\n  const handleConfirmRename = useCallback(() => {\n    if (newPageName.trim() && renameDialog.pageId) {\n      console.log(\"✏️ Page renamed:\", {\n        pageId: renameDialog.pageId,\n        oldName: renameDialog.currentName,\n        newName: newPageName.trim(),\n      });\n      callbacks.onPageRename(renameDialog.pageId, newPageName.trim());\n    }\n    setRenameDialog({ isOpen: false, pageId: \"\", currentName: \"\" });\n    setNewPageName(\"\");\n  }, [newPageName, renameDialog, callbacks]);\n\n  const handleCancelRename = useCallback(() => {\n    setRenameDialog({ isOpen: false, pageId: \"\", currentName: \"\" });\n    setNewPageName(\"\");\n  }, []);\n\n  const handleDeletePage = useCallback(\n    (id: string) => {\n      console.log(\"🗑️ Page deleted:\", { pageId: id });\n      callbacks.onPageDelete(id);\n    },\n    [callbacks]\n  );\n\n  const handleDuplicatePage = useCallback(\n    (id: string) => {\n      console.log(\"📋 Page duplicated:\", { pageId: id });\n      callbacks.onPageDuplicate(id);\n    },\n    [callbacks]\n  );\n\n  const handleAddPage = useCallback(\n    (afterId?: string) => {\n      console.log(\"➕ Page added:\", { afterPageId: afterId || \"end\" });\n      callbacks.onPageAdd(afterId);\n    },\n    [callbacks]\n  );\n\n  const handleReorderPages = useCallback(\n    (activeId: string, overId: string) => {\n      console.log(\"🔄 Pages reordered:\", { activeId, overId });\n      callbacks.onPageReorder(activeId, overId);\n    },\n    [callbacks]\n  );\n\n  return {\n    activeId,\n    setActiveId,\n    renameDialog,\n    newPageName,\n    setNewPageName,\n    handleSelectPage,\n    handleRenamePage,\n    handleConfirmRename,\n    handleCancelRename,\n    handleDeletePage,\n    handleDuplicatePage,\n    handleAddPage,\n    handleReorderPages,\n  };\n}\n","\"use client\";\n\nimport * as React from \"react\";\nimport { useSortable } from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport { Edit2, Trash2, Copy } from \"lucide-react\";\nimport {\n  ContextMenu,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuTrigger,\n} from \"@workspace/ui\";\nimport type { Page } from \"../types/page\";\n\ninterface PageTabProps {\n  page: Page;\n  onSelect: (id: string) => void;\n  onRename: (id: string, newName: string) => void;\n  onDelete: (id: string) => void;\n  onDuplicate: (id: string) => void;\n  isDragging?: boolean;\n}\n\nexport function PageTab({\n  page,\n  onSelect,\n  onRename,\n  onDelete,\n  onDuplicate,\n  isDragging,\n}: PageTabProps) {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging: isSortableDragging,\n  } = useSortable({ id: page.id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isSortableDragging ? 0.5 : 1,\n  };\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    if (!isDragging) {\n      onSelect(page.id);\n    }\n  };\n\n  return (\n    <ContextMenu>\n      <ContextMenuTrigger asChild>\n        <div\n          ref={setNodeRef}\n          style={style}\n          className={`\n            flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium cursor-pointer\n            transition-all duration-200 select-none touch-none\n            ${\n              page.isActive\n                ? \"bg-orange-50 text-orange-700 border border-orange-200\"\n                : \"text-gray-600 hover:text-gray-900 hover:bg-gray-50\"\n            }\n            ${isSortableDragging ? \"shadow-lg z-50\" : \"\"}\n          `}\n          onClick={handleClick}\n          {...attributes}\n          {...listeners}\n        >\n          {page.icon}\n          <span>{page.name}</span>\n        </div>\n      </ContextMenuTrigger>\n      <ContextMenuContent>\n        <ContextMenuItem onClick={() => onRename(page.id, page.name)}>\n          <Edit2 className=\"w-4 h-4 mr-2\" />\n          Rename\n        </ContextMenuItem>\n        <ContextMenuItem onClick={() => onDuplicate(page.id)}>\n          <Copy className=\"w-4 h-4 mr-2\" />\n          Duplicate\n        </ContextMenuItem>\n        <ContextMenuItem\n          onClick={() => onDelete(page.id)}\n          className=\"text-red-600 focus:text-red-600\"\n        >\n          <Trash2 className=\"w-4 h-4 mr-2\" />\n          Delete\n        </ContextMenuItem>\n      </ContextMenuContent>\n    </ContextMenu>\n  );\n}\n","\"use client\";\nimport * as React from \"react\";\nimport { Plus } from \"lucide-react\";\nimport { Button } from \"@workspace/ui\";\n\ninterface AddPageSpaceProps {\n  afterPageId: string;\n  onAddPage: (afterId: string) => void;\n  isHovered?: boolean;\n}\n\nexport function AddPageSpace({\n  afterPageId,\n  onAddPage,\n  isHovered = false,\n}: AddPageSpaceProps) {\n  return (\n    <div className=\"relative flex items-center justify-center\">\n      {/* Large invisible hover area for better UX */}\n      <div className=\"absolute w-12 h-10 -mx-6 z-10\" />\n\n      {/* Spacer that expands when hovered */}\n      <div\n        className={`\n          transition-all duration-300 ease-out flex items-center justify-center\n          ${isHovered ? \"w-10\" : \"w-2\"}\n        `}\n      >\n        {/* Add button with smooth appearance */}\n        <div\n          className={`\n            transition-all duration-300 ease-out\n            ${\n              isHovered\n                ? \"opacity-100 scale-100\"\n                : \"opacity-0 scale-75 pointer-events-none\"\n            }\n          `}\n        >\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-7 w-7 p-0 rounded-full bg-gray-100 hover:bg-gray-200 border border-gray-300 shadow-sm\"\n            onClick={() => onAddPage(afterPageId)}\n          >\n            <Plus className=\"w-3 h-3\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { Page } from \"../types/page\";\n\nexport const getPageTransform = (\n  pageIndex: number,\n  hoveredSpaceId: string | null,\n  pages: Page[]\n) => {\n  if (!hoveredSpaceId) return \"\";\n\n  const hoveredIndex = pages.findIndex((page) => page.id === hoveredSpaceId);\n  if (hoveredIndex === -1) return \"\";\n\n  const distance = Math.abs(pageIndex - hoveredIndex);\n  const direction = pageIndex > hoveredIndex ? 1 : -1;\n\n  // Calculate movement: closer pages move more, farther pages move less\n  let movement = 0;\n  if (distance === 1) {\n    movement = 8 * direction; // Adjacent pages move 8px\n  } else if (distance === 2) {\n    movement = 4 * direction; // Next pages move 4px\n  } else if (distance === 3) {\n    movement = 2 * direction; // Further pages move 2px\n  }\n\n  return `translateX(${movement}px)`;\n};\n","import * as React from \"react\";\nimport { Button } from \"@workspace/ui\";\nimport { Plus } from \"lucide-react\";\n\nexport const AddPage = ({ handleAddPage }: { handleAddPage: () => void }) => {\n  return (\n    <div className=\"ml-6\">\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        className=\"text-gray-500 hover:text-gray-700 gap-2\"\n        onClick={() => handleAddPage()}\n      >\n        <Plus className=\"w-4 h-4\" />\n        Add page\n      </Button>\n    </div>\n  );\n};\n","\"use client\";\nimport * as React from \"react\";\nimport { DragOverlay as DndDragOverlay } from \"@dnd-kit/core\";\nimport type { Page } from \"../types/page\";\n\ninterface DragOverlayProps {\n  draggedPage: Page | null;\n}\n\nexport function DragOverlay({ draggedPage }: DragOverlayProps) {\n  return (\n    <DndDragOverlay>\n      {draggedPage && (\n        <div className=\"flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium bg-white shadow-lg border border-gray-200\">\n          {draggedPage.icon}\n          <span>{draggedPage.name}</span>\n        </div>\n      )}\n    </DndDragOverlay>\n  );\n}\n","import * as React from \"react\";\nimport {\n  DndContext,\n  closestCenter,\n  type DragStartEvent,\n  type DragEndEvent,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n} from \"@dnd-kit/core\";\nimport { sortableKeyboardCoordinates } from \"@dnd-kit/sortable\";\nimport { DragOverlay } from \"./drag-overlay\";\nimport { Page } from \"../types/page\";\n\nexport function DragContext({\n  children,\n  handleDragStart,\n  handleDragEnd,\n  draggedPage,\n}: {\n  children: React.ReactNode;\n  handleDragStart: (event: DragStartEvent) => void;\n  handleDragEnd: (event: DragEndEvent) => void;\n  draggedPage: Page | null;\n}) {\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 8,\n      },\n    }),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  return (\n    <DndContext\n      sensors={sensors}\n      collisionDetection={closestCenter}\n      onDragStart={handleDragStart}\n      onDragEnd={handleDragEnd}\n    >\n      <div className=\"flex items-center\">{children}</div>\n      <DragOverlay draggedPage={draggedPage} />\n    </DndContext>\n  );\n}\n","\"use client\";\n\nimport * as React from \"react\";\nimport { useState } from \"react\";\n\nimport { type DragEndEvent, type DragStartEvent } from \"@dnd-kit/core\";\nimport {\n  SortableContext,\n  horizontalListSortingStrategy,\n} from \"@dnd-kit/sortable\";\nimport { PageTab } from \"./page-tab\";\nimport { AddPageSpace } from \"./add-page-space\";\nimport type { Page } from \"../types/page\";\nimport { getPageTransform } from \"../utils/get-page-transform\";\nimport { AddPage } from \"./add-page\";\nimport { DragContext } from \"./drag-context\";\n\ninterface PageNavigationProps {\n  pages: Page[];\n  activeId: string | null;\n  setActiveId: (id: string | null) => void;\n  handleSelectPage: (id: string) => void;\n  handleRenamePage: (id: string, currentName: string) => void;\n  handleDeletePage: (id: string) => void;\n  handleDuplicatePage: (id: string) => void;\n  handleAddPage: () => void;\n  handleReorderPages: (activeId: string, overId: string) => void;\n}\n\nexport default function PageNavigation({\n  pages,\n  activeId,\n  setActiveId,\n  handleSelectPage,\n  handleRenamePage,\n  handleDeletePage,\n  handleDuplicatePage,\n  handleAddPage,\n  handleReorderPages,\n}: PageNavigationProps) {\n  const [hoveredSpaceId, setHoveredSpaceId] = useState<string | null>(null);\n\n  const handleDragStart = (event: DragStartEvent) => {\n    setActiveId(event.active.id as string);\n  };\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n    setActiveId(null);\n\n    if (!over) return;\n\n    if (active.id !== over.id) {\n      handleReorderPages(active.id as string, over.id as string);\n    }\n  };\n\n  const draggedPage = activeId\n    ? pages.find((page) => page.id === activeId) || null\n    : null;\n\n  return (\n    <DragContext\n      handleDragStart={handleDragStart}\n      handleDragEnd={handleDragEnd}\n      draggedPage={draggedPage}\n    >\n      <SortableContext\n        items={pages.map((p) => p.id)}\n        strategy={horizontalListSortingStrategy}\n      >\n        <div className=\"flex items-center\">\n          {pages.map((page, index) => (\n            <React.Fragment key={page.id}>\n              <div\n                style={{\n                  transform: getPageTransform(index, hoveredSpaceId, pages),\n                  transition: \"transform 300ms ease-out\",\n                }}\n              >\n                <PageTab\n                  page={page}\n                  onSelect={handleSelectPage}\n                  onRename={handleRenamePage}\n                  onDelete={handleDeletePage}\n                  onDuplicate={handleDuplicatePage}\n                  isDragging={!!activeId}\n                />\n              </div>\n              {index < pages.length - 1 && (\n                <div\n                  onMouseEnter={() => setHoveredSpaceId(page.id)}\n                  onMouseLeave={() => setHoveredSpaceId(null)}\n                  className=\"relative\"\n                >\n                  <AddPageSpace\n                    afterPageId={page.id}\n                    onAddPage={handleAddPage}\n                    isHovered={hoveredSpaceId === page.id}\n                  />\n                </div>\n              )}\n            </React.Fragment>\n          ))}\n        </div>\n      </SortableContext>\n\n      <AddPage handleAddPage={handleAddPage} />\n    </DragContext>\n  );\n}\n","import * as React from \"react\";\nimport { RenameDialog } from \"./components/rename-dialog\";\nimport { usePageNavigationInternal } from \"./hooks/use-page-navigation\";\nimport type { Page, PageNavigationCallbacks } from \"./types/page\";\nimport PageNavigation from \"./components/page-navigation\";\n\ninterface RootProps extends PageNavigationCallbacks {\n  pages: Page[];\n}\n\nexport default function Root({\n  pages,\n  onPageSelect,\n  onPageAdd,\n  onPageReorder,\n  onPageRename,\n  onPageDelete,\n  onPageDuplicate,\n}: RootProps) {\n  const callbacks: PageNavigationCallbacks = {\n    onPageSelect,\n    onPageAdd,\n    onPageReorder,\n    onPageRename,\n    onPageDelete,\n    onPageDuplicate,\n  };\n\n  const {\n    activeId,\n    setActiveId,\n    renameDialog,\n    newPageName,\n    setNewPageName,\n    handleSelectPage,\n    handleRenamePage,\n    handleConfirmRename,\n    handleCancelRename,\n    handleDeletePage,\n    handleDuplicatePage,\n    handleAddPage,\n    handleReorderPages,\n  } = usePageNavigationInternal(callbacks);\n\n  return (\n    <div className=\"w-full bg-white border-b border-gray-200 px-6 py-3\">\n      <PageNavigation\n        pages={pages}\n        activeId={activeId}\n        setActiveId={setActiveId}\n        handleSelectPage={handleSelectPage}\n        handleRenamePage={handleRenamePage}\n        handleDeletePage={handleDeletePage}\n        handleDuplicatePage={handleDuplicatePage}\n        handleAddPage={handleAddPage}\n        handleReorderPages={handleReorderPages}\n      />\n      <RenameDialog\n        state={renameDialog}\n        newPageName={newPageName}\n        onNewPageNameChange={setNewPageName}\n        onConfirm={handleConfirmRename}\n        onCancel={handleCancelRename}\n      />\n    </div>\n  );\n}\n"]}